#!/usr/bin/env ruby
require "bundler/setup"
require "checker"
require 'open-uri'
require 'optparse'
require 'nokogiri'
require "ansi"

class DownloadDataTool
  def initialize
    # settings
    @datadir = ENV['DATADIR'] || File.expand_path("#{File.dirname(__FILE__)}/../../data")
    @force = false

    # parse command line arguments
    @opts = OptionParser.new do |opt|
      opt.banner = "Usage: #{opt.program_name} [options] [PROBLEM]"

      opt.on('--datadir DATADIR', "The location of the directory containing the problems.yml file") do |o| 
        @datadir = o
      end

      opt.on('-f', '--force', "Overwrite existing documentation") do |o|
        @force = true
      end
    end
  end

  # parse command line options
  def parse_opts
    @opts.parse!
  end

  # prints an error (formatted in red)
  def error(n)
    STDERR.puts ANSI.red {"Error: #{n}"}
    exit(-1)
  end

  # prints a warning (formatted in yellow)
  def warn(n)
    STDOUT.puts ANSI.yellow {"Warning: #{n}"}
  end

  # prints help and quits
  def help(opts)
    puts @opts.help
    exit 0
  end

  # prints info statement
  def info(n)
    STDOUT.puts "#{ANSI.blue{'==>'}} #{n}"
  end

  # prints step statement
  def step(n)
    STDOUT.puts "#{ANSI.green{'==>'}} #{n}"
  end

  def load_problems
    Checker::Problems.load(File.join(@datadir, 'problems.yml'))
  end

  def download_data problem_p
    info "Loading problems"
    problems = load_problems

    if problem_p
      problem = problems[problem_p.to_i]
      error "Problem does not exist" unless problem.exists?
      step "Looking for data for problem #{problem.number}"
      download_problem_data problem
    else
      step "Looking for data for all problems"
      download_all_data problems
    end

    problems.save
  end

  def get_problem_page(problem)
    open("https://projecteuler.net/problem=#{problem.number}").read
  end

  def download_all_data problems
    problems.each do |p|
      download_problem_data p
      sleep 0.5
      problems.save
    end
  end

  def download_problem_data problem
    info "Accessing problem page at https://projecteuler.net/problem=#{problem.number}"
    begin
      page_data = get_problem_page(problem)
    rescue Exception => e
      warn "Error accessing problem page:"
      warn e.message
      return
    end
    page = Nokogiri::HTML(page_data)

    # extract data
    links = page.css('div.problem_content a')
    data = {}
    links.each do |link|
      if /project\/resources.*/.match(link.attributes['href'].value)
        data[link.text] = link.attributes['href'].value
      end
    end

    error "Multiple data given" if data.length > 1

    data.each do |name, location|
      info "Found data file for problem #{problem.number}, downloading"

      data_file = File.join(@datadir, "#{problem.number.to_s.rjust(3, '0')}-#{name}")
      if !File.exists?(data_file) || @force
        data_file = File.open(data_file, 'w')
        begin
          data_contents = open("https://projecteuler.net/#{location}").read
        rescue Exception => e
          warn "Error accessing data file:"
          warn e.message
        end
        data_file.write(data_contents)
        data_file.close
      else
        info "Skipping data file for problem #{problem.number} (already downloaded)"
      end

      problem.data = name
    end

    info "No data found for problem #{problem.number}" unless !data.empty?
  end
end

tool = DownloadDataTool.new
tool.parse_opts

tool.error "Too many arguments specified" if ARGV.length > 1
tool.download_data ARGV[0]
