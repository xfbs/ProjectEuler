#!/usr/bin/env ruby
require "bundler/setup"
require "checker"
require 'open-uri'
require 'optparse'
require 'nokogiri'

# settings
datadir = ENV['DATADIR'] || File.expand_path("#{File.dirname(__FILE__)}/../../data")
only_new = false

# parse command line arguments
OptionParser.new do |opt|
  opt.on('--datadir DATADIR') { |o| datadir = o }
  opt.on('--only-new') { |o| only_new = true }
end.parse!

# extract a given problem page from project euler
def get_problem_page(page=1)
  open("https://projecteuler.net/archives;page=#{page}").read
end

# get all problem pages
def get_problem_pages()
  pages = []
  (1..20).each do |n|
    p = get_problem_page(n)
    break if p[-1] && p[-1] == p
    pages << p
    sleep 1
  end

  pages
end

# extract problem ID and name from pages
def extract_problems()
  pages = get_problem_pages()

  # load into nokogiri
  pages = pages.map{|page| Nokogiri::HTML(page)}

  # extract problem table
  problem_tables = pages.map{|page| page.css('table#problems_table')}

  # extract table rows we care about
  problem_table_rows = problem_tables.map{|table| table.css('tr')[1..-1].to_a}.flatten

  problems = problem_table_rows.map do |row|
    number = row.css('td.id_column')[0].text.to_i
    name = row.css('a')[0].text
    {"number" => number, "name" => name}
  end

  problems
end

# load current problems
problems = Checker::Problems.load("#{datadir}/problems.yml")

# add/update titles
puts "Loading problems from projecteuler, this could take a bit..."
extract_problems().each do |problem|
  if !only_new || problems[problem['number']].name
    problems[problem['number']].name = problem['name']
  end
end

# save our changes
puts "Done adding problems, saving..."
problems.save
