#!/usr/bin/env ruby
require "bundler/setup"
require "checker"
require 'optparse'
require "ansi"

# settings
$datadir = ENV['DATADIR'] || File.expand_path("#{File.dirname(__FILE__)}/../../data")
$force = false

# parse command line arguments
options = OptionParser.new do |opt|
  opt.banner = "Usage: #{opt.program_name} [options] add|check problem_num solution"
  opt.on('--datadir DATADIR', "The directory where the problems.yml is stored") do |o|
    $datadir = o
  end

  opt.on('-f', '--force', "Force adding a solution") do |o|
    $force = true
  end
end

# parse options
options.parse!

def help()
  puts options.help
  exit 0
end

def error(n)
  STDERR.puts ANSI.red {"Error: #{n}"}
  exit(-1)
end

# get request from user
method = ARGV[0] || help()
problem_num = ARGV[1].to_i || error("No problem specified.")
solution = ARGV[2] || error("No solution specified.")

# load current problems
puts "#{ANSI.blue{'==>'}} Loading problem list from #{ANSI.bold{File.join($datadir,'/problems.yml')}}"
problems = Checker::Problems.load("#{$datadir}/problems.yml")

def solution_add(problem, solution)
  unless $force
    if !problem.name
      error "The problem does not exist in the database, use --force to add the solution anyways."
    end

    if problem.solution
      error "A solution exists already. Use --force to overwrite."
    end
  end

  if problem.name
    puts "#{ANSI.green{'==>'}} Problem ##{problem.number}: #{problem.name}"
  else
    puts "#{ANSI.green{'==>'}} Problem ##{problem.number}"
  end

  problem.solution = solution
  puts "Added solution #{ANSI.green{solution}}."
end

def solution_check(problem, solution)
  if !problem.solution
    error "The problem does not have a solution yet."
  end

  if problem.name
    puts "#{ANSI.green{'==>'}} Problem ##{problem.number}: #{problem.name}"
  else
    puts "#{ANSI.green{'==>'}} Problem ##{problem.number}"
  end

  if problem.check(solution)
    puts "#{ANSI.green{'✔'}} solution is valid."
  else
    puts "#{ANSI.red{'✗'}} solution is incorrect."
  end
end

# determine what to do
case method
when "add"
  solution_add(problems[problem_num], solution)
  problems.save
when "check"
  solution_check(problems[problem_num], solution)
end

