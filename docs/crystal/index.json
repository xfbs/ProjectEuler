{"repository_name":"github.com/xfbs/euler","body":"# Euler Library\n\nThe library is part of [xfbs/euler](https://xfbs.github.io/euler), which aims to\nsolve [Project Euler](https://projecteuler.net/) problems in a variety of\nlanguages.\n\nThe functions and classes of this library are to share code between different\nsolutions. There are also tests provided, if you clone the\n[repository](https://github.com/xfbs/euler), and navigate to this library (which\nis in `/lib/crystal/euler`), there is a `Makefile` that supports the following\ntargets:\n\n  - `make test`\n\n>   Builds and runs all the tests of this library.\n\n  - `make fmt`\n\n>   Runs the crystal code formatter over all of the code in this library.\n\n  - `make doc`\n\n>   Generates these docs, the output will be placed in `doc/lib/crystal` in the\n>   repository.\n\nAll code in this library has been developed and tested with Crystal `0.24.1`.\nSince crystal is still under development, things may break with future releases\nof Crystal.\n","program":{"html_id":"github.com/xfbs/euler/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/xfbs/euler","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/xfbs/euler/Euler","path":"Euler.html","kind":"module","full_name":"Euler","name":"Euler","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"euler/divisors.cr","line_number":1,"url":"https://github.com/xfbs/euler/blob/63d37e7bd26fb2b06dfc8f1924d18436080ffd74/src/euler/divisors.cr"},{"filename":"euler/math.cr","line_number":1,"url":"https://github.com/xfbs/euler/blob/63d37e7bd26fb2b06dfc8f1924d18436080ffd74/src/euler/math.cr"},{"filename":"euler/prime.cr","line_number":1,"url":"https://github.com/xfbs/euler/blob/63d37e7bd26fb2b06dfc8f1924d18436080ffd74/src/euler/prime.cr"},{"filename":"euler/sieve.cr","line_number":1,"url":"https://github.com/xfbs/euler/blob/63d37e7bd26fb2b06dfc8f1924d18436080ffd74/src/euler/sieve.cr"},{"filename":"euler.cr","line_number":5,"url":"https://github.com/xfbs/euler/blob/63d37e7bd26fb2b06dfc8f1924d18436080ffd74/src/euler.cr"}],"repository_name":"github.com/xfbs/euler","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"PHI","value":"((Math.sqrt(5)) + 1) / 2","doc":"The value of phi, the golden ratio.\n\nThis is precomputed and stored to efficiently generate fibonacci numbers\nwith `Euler.fibonacci(n)`.","summary":"<p>The value of phi, the golden ratio.</p>"},{"name":"ROOT5","value":"Math.sqrt(5)","doc":"The value of the square root of 5.\n\nThis is precomputed and stored to efficiently generate fibonacci numbers\nwith `Euler.fibonacci(n)`.","summary":"<p>The value of the square root of 5.</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"A collection of numerical functions and classes for use with Project Euler\nproblems.","summary":"<p>A collection of numerical functions and classes for use with Project Euler problems.</p>","class_methods":[{"id":"divisors(num)-class-method","html_id":"divisors(num)-class-method","name":"divisors","doc":"Returns an iterator over the divisors of `num`.\n\nConstructs and returns a new instance of `Euler::Divisors(T)`, where `T` is\nthe type of `num`.\n\n## Examples\n\n```\ndivisors(10).sum == 8   # ==> true\ndivisors(11).count == 1 # ==> true\n```","summary":"<p>Returns an iterator over the divisors of <code>num</code>.</p>","abstract":false,"args":[{"name":"num","doc":null,"default_value":"","external_name":"num","restriction":""}],"args_string":"(num)","source_link":"https://github.com/xfbs/euler/blob/63d37e7bd26fb2b06dfc8f1924d18436080ffd74/src/euler/divisors.cr#L91","source_link":"https://github.com/xfbs/euler/blob/63d37e7bd26fb2b06dfc8f1924d18436080ffd74/src/euler/divisors.cr#L91","def":{"name":"divisors","args":[{"name":"num","doc":null,"default_value":"","external_name":"num","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Divisors.new(num)"}},{"id":"factorial(n)-class-method","html_id":"factorial(n)-class-method","name":"factorial","doc":"Returns the `n`th factorial as a `UInt64`.\n\nUsing the cache `@@factorials`, we look up the `n`th factorial and return it\nas a `UInt64`. The caller must promise to not call this function with `n >\n20`. `UInt64` would overflow with 21!, so we don't store those factorials,\nmeaning that calling it would result in a crash.\n\n## Examples\n\n```\nEuler.factorial(0).should eq 1\nEuler.factorial(1).should eq 1\nEuler.factorial(2).should eq 2\nEuler.factorial(3).should eq 6\nEuler.factorial(6).should eq 720\n```","summary":"<p>Returns the <code>n</code>th factorial as a <code>UInt64</code>.</p>","abstract":false,"args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":""}],"args_string":"(n)","source_link":"https://github.com/xfbs/euler/blob/63d37e7bd26fb2b06dfc8f1924d18436080ffd74/src/euler/math.cr#L38","source_link":"https://github.com/xfbs/euler/blob/63d37e7bd26fb2b06dfc8f1924d18436080ffd74/src/euler/math.cr#L38","def":{"name":"factorial","args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@factorials[n]"}},{"id":"fibonacci(n)-class-method","html_id":"fibonacci(n)-class-method","name":"fibonacci","doc":"Generates the `n`th fibonacci number.\n\nThis uses a fast algorithm based on exponentiation of `Euler::PHI` to\ngenerate the `n`th fibonacci number.\n\n## Examples\n\n```\nEuler.fibonacci(1).should eq 1\nEuler.fibonacci(2).should eq 1\nEuler.fibonacci(3).should eq 2\nEuler.fibonacci(4).should eq 3\nEuler.fibonacci(5).should eq 5\nEuler.fibonacci(6).should eq 8\n```","summary":"<p>Generates the <code>n</code>th fibonacci number.</p>","abstract":false,"args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":""}],"args_string":"(n)","source_link":"https://github.com/xfbs/euler/blob/63d37e7bd26fb2b06dfc8f1924d18436080ffd74/src/euler/math.cr#L57","source_link":"https://github.com/xfbs/euler/blob/63d37e7bd26fb2b06dfc8f1924d18436080ffd74/src/euler/math.cr#L57","def":{"name":"fibonacci","args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"((PHI ** n) / ROOT5).round"}},{"id":"is_palindrome?(num,base=10)-class-method","html_id":"is_palindrome?(num,base=10)-class-method","name":"is_palindrome?","doc":"Checks if a number is a palindrome.\n\nQuickly checks if a number is a palindrome, meaning that it's digits are the\nsame read backwards as they are read forwards. For example, 1023201 is a\npalindrome (in base 10).\nNumbers can be checked for being palindromes in other bases, too.\n\n## Examples\n\n```\nEuler.is_palindrome(12321).should be_true\nEuler.is_palindrome(1002101).should be_false\nEuler.is_palindrome(5, 2).should be_true\n```","summary":"<p>Checks if a number is a palindrome.</p>","abstract":false,"args":[{"name":"num","doc":null,"default_value":"","external_name":"num","restriction":""},{"name":"base","doc":null,"default_value":"10","external_name":"base","restriction":""}],"args_string":"(num, base = <span class=\"n\">10</span>)","source_link":"https://github.com/xfbs/euler/blob/63d37e7bd26fb2b06dfc8f1924d18436080ffd74/src/euler/math.cr#L75","source_link":"https://github.com/xfbs/euler/blob/63d37e7bd26fb2b06dfc8f1924d18436080ffd74/src/euler/math.cr#L75","def":{"name":"is_palindrome?","args":[{"name":"num","doc":null,"default_value":"","external_name":"num","restriction":""},{"name":"base","doc":null,"default_value":"10","external_name":"base","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"cur = num\nrev = 0\nwhile cur > 0\n  rev = rev * base\n  rev = rev + (cur % base)\n  cur = cur / base\nend\nrev == num\n"}},{"id":"pandigital(len,nth)-class-method","html_id":"pandigital(len,nth)-class-method","name":"pandigital","doc":"Generates the `nth` pandigital of length `len`.\n\nWorks by generating the `nth` permutation of 1..`len`, and returning that as\na number.\n\n## Examples\n\n```\nEuler.pandigital(len: 5, nth: 3).should eq 12453\nEuler.pandigital(len: 9, nth: 0).should eq 123456789\n```","summary":"<p>Generates the <code>nth</code> pandigital of length <code>len</code>.</p>","abstract":false,"args":[{"name":"len","doc":null,"default_value":"","external_name":"len","restriction":""},{"name":"nth","doc":null,"default_value":"","external_name":"nth","restriction":""}],"args_string":"(len, nth)","source_link":"https://github.com/xfbs/euler/blob/63d37e7bd26fb2b06dfc8f1924d18436080ffd74/src/euler/math.cr#L98","source_link":"https://github.com/xfbs/euler/blob/63d37e7bd26fb2b06dfc8f1924d18436080ffd74/src/euler/math.cr#L98","def":{"name":"pandigital","args":[{"name":"len","doc":null,"default_value":"","external_name":"len","restriction":""},{"name":"nth","doc":null,"default_value":"","external_name":"nth","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"num = 0\ntaken = 0\nwhile len > 0\n  num = num * 10\n  choice = nth / (factorial(len - 1))\n  nth = nth % (factorial(len - 1))\n  digit = 0\n  while choice != 0\n    if (taken & (1 << digit)) > 0\n    else\n      choice = choice - 1\n    end\n    digit = digit + 1\n  end\n  while (taken & (1 << digit)) > 0\n    digit = digit + 1\n  end\n  taken = taken | (1 << digit)\n  num = num + (digit + 1)\n  len = len - 1\nend\nnum\n"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/xfbs/euler/Euler/Divisors","path":"Euler/Divisors.html","kind":"class","full_name":"Euler::Divisors(T)","name":"Divisors","abstract":false,"superclass":{"html_id":"github.com/xfbs/euler/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/xfbs/euler/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"},{"html_id":"github.com/xfbs/euler/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/xfbs/euler/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/xfbs/euler/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"euler/divisors.cr","line_number":14,"url":"https://github.com/xfbs/euler/blob/63d37e7bd26fb2b06dfc8f1924d18436080ffd74/src/euler/divisors.cr"}],"repository_name":"github.com/xfbs/euler","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/xfbs/euler/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/xfbs/euler/Euler","kind":"module","full_name":"Euler","name":"Euler"},"doc":"An iterator over the divisors of a number.\n\nThis is not the most efficient code as it just brute forces divisors from\none until the square root of the number. It returns all proper divisors —\nmeaning divisors that are smaller than the number itself.\n\nThe order in which this iterator returns the divisors in unspecified — if\nyou need them to be sorted, you have to do that manually.\n\nYou can use this class directly, or you can use the `Euler.divisors()`\nfunction which just wraps it and saves you from having to type\n`Euler::Divisors.new(num)`.","summary":"<p>An iterator over the divisors of a number.</p>","class_methods":[],"constructors":[{"id":"new(num:T)-class-method","html_id":"new(num:T)-class-method","name":"new","doc":"Creates a new iterator instance over the divisors of `num`.\n\nSince this class is generic, whatever type `num` has is also the type of\nthe divisors that will be returned. Note that this class probably won't\nwork with floating-point variables, so make sure `num` is an integral\ntype.\n\n## Examples\n\n```\ndivisors = Euler::Divisors.new(55)\ndivisors[0] == 1 # ==> true\ndivisors[1] == 5 # ==> true\n```","summary":"<p>Creates a new iterator instance over the divisors of <code>num</code>.</p>","abstract":false,"args":[{"name":"num","doc":null,"default_value":"","external_name":"num","restriction":"T"}],"args_string":"(num : T)","source_link":"https://github.com/xfbs/euler/blob/63d37e7bd26fb2b06dfc8f1924d18436080ffd74/src/euler/divisors.cr#L31","source_link":"https://github.com/xfbs/euler/blob/63d37e7bd26fb2b06dfc8f1924d18436080ffd74/src/euler/divisors.cr#L31","def":{"name":"new","args":[{"name":"num","doc":null,"default_value":"","external_name":"num","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Divisors(T).allocate\n_.initialize(num)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"next-instance-method","html_id":"next-instance-method","name":"next","doc":"Returns the next divisor, or Iterator::Stop to signal that there aren't\nany left.\n\n## Examples\n\n```\ndiv = Euler::Divisors.new(12)\ndiv.next == 1 # ==> true\ndiv.next == 2 # ==> true\ndiv.next == 3 # ==> true\ndiv.next == 4 # ==> true\ndiv.next == 6 # ==> true\ndiv.next == Iterator::Stop # ==> true\n```","summary":"<p>Returns the next divisor, or Iterator::Stop to signal that there aren't any left.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/xfbs/euler/blob/63d37e7bd26fb2b06dfc8f1924d18436080ffd74/src/euler/divisors.cr#L52","source_link":"https://github.com/xfbs/euler/blob/63d37e7bd26fb2b06dfc8f1924d18436080ffd74/src/euler/divisors.cr#L52","def":{"name":"next","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @cur > @sqrt\n  return self.stop\nend\nif !@check\n  if (@num % @cur) == 0\n    @check = true\n    return @cur\n  else\n    @cur = @cur + 1\n    return self.next\n  end\nelse\n  @check = false\n  recp = (  @num / @cur)\n  if (@cur != recp) && (@cur != 1)\n    @cur = @cur + 1\n    return recp\n  else\n    @cur = @cur + 1\n    return self.next\n  end\nend\n"}}],"macros":[],"types":[]},{"html_id":"github.com/xfbs/euler/Euler/Prime","path":"Euler/Prime.html","kind":"class","full_name":"Euler::Prime","name":"Prime","abstract":false,"superclass":{"html_id":"github.com/xfbs/euler/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/xfbs/euler/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"},{"html_id":"github.com/xfbs/euler/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/xfbs/euler/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/xfbs/euler/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"euler/prime.cr","line_number":3,"url":"https://github.com/xfbs/euler/blob/63d37e7bd26fb2b06dfc8f1924d18436080ffd74/src/euler/prime.cr"}],"repository_name":"github.com/xfbs/euler","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/xfbs/euler/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/xfbs/euler/Euler","kind":"module","full_name":"Euler","name":"Euler"},"doc":"Prime generator class.","summary":"<p>Prime generator class.</p>","class_methods":[],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":"Creates a new empty prime generator.\n\n## Examples\n\n```\nprimes = Euler::Prime.new\n```","summary":"<p>Creates a new empty prime generator.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/xfbs/euler/blob/63d37e7bd26fb2b06dfc8f1924d18436080ffd74/src/euler/prime.cr#L13","source_link":"https://github.com/xfbs/euler/blob/63d37e7bd26fb2b06dfc8f1924d18436080ffd74/src/euler/prime.cr#L13","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"check?(n)-instance-method","html_id":"check?(n)-instance-method","name":"check?","doc":"Checks if a number is prime.\n\nTries to divide the number by all primes up to `sqrt(n)`, returns `true`\nif it can't find a divisor meaning that the number is prime, and `false`\notherwise.\n\n## Examples\n\n```\n# new prime generator\nprimes = Euler::Prime.new\n\nprimes.check(77).should be_false\nprimes.check(97).should be_true\n```","summary":"<p>Checks if a number is prime.</p>","abstract":false,"args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":""}],"args_string":"(n)","source_link":"https://github.com/xfbs/euler/blob/63d37e7bd26fb2b06dfc8f1924d18436080ffd74/src/euler/prime.cr#L132","source_link":"https://github.com/xfbs/euler/blob/63d37e7bd26fb2b06dfc8f1924d18436080ffd74/src/euler/prime.cr#L132","def":{"name":"check?","args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"max = (Math.sqrt(n)).to_i\nwhile @primes.last <= max\n  self.next\nend\ncheck_fast?(n)\n"}},{"id":"check_fast?(n)-instance-method","html_id":"check_fast?(n)-instance-method","name":"check_fast?","doc":"Checks if a number is prime, assuming that we already have all primes up\nto `sqrt(n)`\n\nTries to divide the number by all primes up to `sqrt(n)`, returns `true`\nif it can't find a divisor meaning that the number is prime, and `false`\notherwise.\n\n## Examples\n\n```\n# new prime generator\nprimes = Euler::Prime.new\n\nprimes.check(77).should be_false\nprimes.check(97).should be_true\n```","summary":"<p>Checks if a number is prime, assuming that we already have all primes up to <code>sqrt(n)</code></p>","abstract":false,"args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":""}],"args_string":"(n)","source_link":"https://github.com/xfbs/euler/blob/63d37e7bd26fb2b06dfc8f1924d18436080ffd74/src/euler/prime.cr#L104","source_link":"https://github.com/xfbs/euler/blob/63d37e7bd26fb2b06dfc8f1924d18436080ffd74/src/euler/prime.cr#L104","def":{"name":"check_fast?","args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"max = (Math.sqrt(n)).to_i\npos = 0\nprime = @primes.unsafe_at(pos)\nwhile prime <= max\n  if (n % prime) == 0\n    return false\n  end\n  pos = pos + 1\n  prime = @primes.unsafe_at(pos)\nend\ntrue\n"}},{"id":"index(p)-instance-method","html_id":"index(p)-instance-method","name":"index","doc":"Performs a reverse lookup on a prime.\n\nGiven a prime `p`, find out at which position it is (meaning find an `n`\nsuch that `nth(n) == p` is true, or returns `nil`.\n\n## Examples\n\n```\n# new prime generator\nprimes = Euler::Prime.new\n\nprime.index(2).should eq 0\nprime.index(3).should eq 1\nprime.index(4).should be_nil\nprime.index(5).should eq 2\nprime.index(6).should be_nil\n```","summary":"<p>Performs a reverse lookup on a prime.</p>","abstract":false,"args":[{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":""}],"args_string":"(p)","source_link":"https://github.com/xfbs/euler/blob/63d37e7bd26fb2b06dfc8f1924d18436080ffd74/src/euler/prime.cr#L159","source_link":"https://github.com/xfbs/euler/blob/63d37e7bd26fb2b06dfc8f1924d18436080ffd74/src/euler/prime.cr#L159","def":{"name":"index","args":[{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"while p > @primes.last\n  self.next\nend\ni = @primes.bsearch_index do |c, i|\n  c >= p\nend\nif (i.nil?) || (@primes[i.to_u] == p)\n  i\nelse\n  nil\nend\n"}},{"id":"iter-instance-method","html_id":"iter-instance-method","name":"iter","doc":"Returns an iterator over the prime numbers.\n\nNote that this iterator assumes that you do not call `nth()` or other\nmethods that may mutate the state of the primes array while iterating over\nit.\n\n## Examples\n\n```\n# new prime generator\nprimes = Euler::Prime.new\n\nprimes.iter.take(10).sum.should eq 129\nprimes.iter.take_while{ |n| n < 100 }.last.should eq 97\n```","summary":"<p>Returns an iterator over the prime numbers.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/xfbs/euler/blob/63d37e7bd26fb2b06dfc8f1924d18436080ffd74/src/euler/prime.cr#L84","source_link":"https://github.com/xfbs/euler/blob/63d37e7bd26fb2b06dfc8f1924d18436080ffd74/src/euler/prime.cr#L84","def":{"name":"iter","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@primes.each.chain(self)"}},{"id":"next-instance-method","html_id":"next-instance-method","name":"next","doc":"Generates the next prime.\n\nThis method generates (at least one) new prime and returns it.\n\n## Example\n\n```\n# new prime generator\nprimes = Euler::Prime.new\n\nprimes.next.should eq 5\nprimes.next.should eq 7\n```","summary":"<p>Generates the next prime.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/xfbs/euler/blob/63d37e7bd26fb2b06dfc8f1924d18436080ffd74/src/euler/prime.cr#L60","source_link":"https://github.com/xfbs/euler/blob/63d37e7bd26fb2b06dfc8f1924d18436080ffd74/src/euler/prime.cr#L60","def":{"name":"next","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"cur = @primes.last + 2\nwhile !(check_fast?(cur))\n  cur = cur + 2\nend\n@primes.push(cur)\ncur\n"}},{"id":"nth(n)-instance-method","html_id":"nth(n)-instance-method","name":"nth","doc":"Returns the `n`th prime.\n\nInternally, it generates all primes up to `n`, and then returns the prime\nat position `n`. This means that for large `n`, it is a slow operation.\nHowever, since all the primes up to `n` are cached, subsequent lookups\nwill be faster.\n\nNote that this function starts counting at 0, meaning that the first prime\nis at `nth(0)`.\n\n## Examples\n\n```\n# new prime generator\nprimes = Euler::Prime.new\n\n# get first few primes\nprimes.nth(0).should eq 2\nprimes.nth(1).should eq 3\nprimes.nth(2).should eq 5\nprimes.nth(99).should eq 541\n```","summary":"<p>Returns the <code>n</code>th prime.</p>","abstract":false,"args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":""}],"args_string":"(n)","source_link":"https://github.com/xfbs/euler/blob/63d37e7bd26fb2b06dfc8f1924d18436080ffd74/src/euler/prime.cr#L39","source_link":"https://github.com/xfbs/euler/blob/63d37e7bd26fb2b06dfc8f1924d18436080ffd74/src/euler/prime.cr#L39","def":{"name":"nth","args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"while @primes.size <= n\n  self.next\nend\n@primes.unsafe_at(n)\n"}}],"macros":[],"types":[]},{"html_id":"github.com/xfbs/euler/Euler/Sieve","path":"Euler/Sieve.html","kind":"class","full_name":"Euler::Sieve","name":"Sieve","abstract":false,"superclass":{"html_id":"github.com/xfbs/euler/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/xfbs/euler/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/xfbs/euler/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/xfbs/euler/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"euler/sieve.cr","line_number":7,"url":"https://github.com/xfbs/euler/blob/63d37e7bd26fb2b06dfc8f1924d18436080ffd74/src/euler/sieve.cr"}],"repository_name":"github.com/xfbs/euler","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/xfbs/euler/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/xfbs/euler/Euler","kind":"module","full_name":"Euler","name":"Euler"},"doc":"Prime sieve class\n\nThis prime sieve can be used to efficiently generate large numbers of\nprimes. It takes more space than `Euler::Prime`, but requires less\ntime.","summary":"<p>Prime sieve class</p>","class_methods":[],"constructors":[{"id":"new(max)-class-method","html_id":"new(max)-class-method","name":"new","doc":"Creates a new prime sieve instance.\n\nUnlike the `Euler::Prime` generator, which can dynamically generate\nprimes, this generator needs to know in advance up to which number it\nshould check for primes.\n\nConstructing a Prime::Sieve with a `max` of 200 means that numbers up to\n200 will be checked for primality.\n\n## Examples\n\n```\n# new prime generator\nsieve = Euler::Sieve.new(100)\n\nsieve.count.should eq 25\n```","summary":"<p>Creates a new prime sieve instance.</p>","abstract":false,"args":[{"name":"max","doc":null,"default_value":"","external_name":"max","restriction":""}],"args_string":"(max)","source_link":"https://github.com/xfbs/euler/blob/63d37e7bd26fb2b06dfc8f1924d18436080ffd74/src/euler/sieve.cr#L27","source_link":"https://github.com/xfbs/euler/blob/63d37e7bd26fb2b06dfc8f1924d18436080ffd74/src/euler/sieve.cr#L27","def":{"name":"new","args":[{"name":"max","doc":null,"default_value":"","external_name":"max","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(max)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"each(&block)-instance-method","html_id":"each(&amp;block)-instance-method","name":"each","doc":"Iterate over all the primes.\n\nFor convenience, this generator uses `Enumerable(UInt64)` to provide a\nsimple interface for iterating over all of the primes.\n\n## Examples\n\n```\n# new prime generator\nsieve = Euler::Sieve.new(1000)\n\n# sum up primes (sum is an Enumerable(T) method)\nsieve.sum.should eq 76127\n```","summary":"<p>Iterate over all the primes.</p>","abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/xfbs/euler/blob/63d37e7bd26fb2b06dfc8f1924d18436080ffd74/src/euler/sieve.cr#L55","source_link":"https://github.com/xfbs/euler/blob/63d37e7bd26fb2b06dfc8f1924d18436080ffd74/src/euler/sieve.cr#L55","def":{"name":"each","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@sieve.each do |p|\n  if p > 0\n  else\n    next\n  end\n  yield p\nend"}}],"macros":[],"types":[]}]}]}}