{"repository_name":"github.com/xfbs/euler","body":"","program":{"html_id":"github.com/xfbs/euler/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/xfbs/euler","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/xfbs/euler/Euler","path":"Euler.html","kind":"module","full_name":"Euler","name":"Euler","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"euler/divisors.cr","line_number":1,"url":"https://github.com/xfbs/euler/blob/93b83f2d39f89b50f06e66e3121efc59bccd72b8/src/euler/divisors.cr"},{"filename":"euler/factorial.cr","line_number":1,"url":"https://github.com/xfbs/euler/blob/93b83f2d39f89b50f06e66e3121efc59bccd72b8/src/euler/factorial.cr"},{"filename":"euler/fibonacci.cr","line_number":1,"url":"https://github.com/xfbs/euler/blob/93b83f2d39f89b50f06e66e3121efc59bccd72b8/src/euler/fibonacci.cr"},{"filename":"euler/palindrome.cr","line_number":1,"url":"https://github.com/xfbs/euler/blob/93b83f2d39f89b50f06e66e3121efc59bccd72b8/src/euler/palindrome.cr"},{"filename":"euler/pandigital.cr","line_number":3,"url":"https://github.com/xfbs/euler/blob/93b83f2d39f89b50f06e66e3121efc59bccd72b8/src/euler/pandigital.cr"},{"filename":"euler/prime.cr","line_number":1,"url":"https://github.com/xfbs/euler/blob/93b83f2d39f89b50f06e66e3121efc59bccd72b8/src/euler/prime.cr"},{"filename":"euler/sieve.cr","line_number":1,"url":"https://github.com/xfbs/euler/blob/93b83f2d39f89b50f06e66e3121efc59bccd72b8/src/euler/sieve.cr"},{"filename":"euler.cr","line_number":3,"url":"https://github.com/xfbs/euler/blob/93b83f2d39f89b50f06e66e3121efc59bccd72b8/src/euler.cr"}],"repository_name":"github.com/xfbs/euler","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"PHI","value":"((Math.sqrt(5)) + 1) / 2","doc":null,"summary":null},{"name":"ROOT5","value":"Math.sqrt(5)","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[{"id":"divisors(num)-class-method","html_id":"divisors(num)-class-method","name":"divisors","doc":"returns an iterator over the divisors of num.","summary":"<p>returns an iterator over the divisors of num.</p>","abstract":false,"args":[{"name":"num","doc":null,"default_value":"","external_name":"num","restriction":""}],"args_string":"(num)","source_link":"https://github.com/xfbs/euler/blob/93b83f2d39f89b50f06e66e3121efc59bccd72b8/src/euler/divisors.cr#L45","source_link":"https://github.com/xfbs/euler/blob/93b83f2d39f89b50f06e66e3121efc59bccd72b8/src/euler/divisors.cr#L45","def":{"name":"divisors","args":[{"name":"num","doc":null,"default_value":"","external_name":"num","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Divisors.new(num)"}},{"id":"factorial64(n)-class-method","html_id":"factorial64(n)-class-method","name":"factorial64","doc":"returns the `n`th factorial as a UInt64, thus it's limited to factorials up\nto 20!.","summary":"<p>returns the <code>n</code>th factorial as a UInt64, thus it's limited to factorials up to 20!.</p>","abstract":false,"args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":""}],"args_string":"(n)","source_link":"https://github.com/xfbs/euler/blob/93b83f2d39f89b50f06e66e3121efc59bccd72b8/src/euler/factorial.cr#L6","source_link":"https://github.com/xfbs/euler/blob/93b83f2d39f89b50f06e66e3121efc59bccd72b8/src/euler/factorial.cr#L6","def":{"name":"factorial64","args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@factorials[n]"}},{"id":"fibonacci(n)-class-method","html_id":"fibonacci(n)-class-method","name":"fibonacci","doc":null,"summary":null,"abstract":false,"args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":""}],"args_string":"(n)","source_link":"https://github.com/xfbs/euler/blob/93b83f2d39f89b50f06e66e3121efc59bccd72b8/src/euler/fibonacci.cr#L5","source_link":"https://github.com/xfbs/euler/blob/93b83f2d39f89b50f06e66e3121efc59bccd72b8/src/euler/fibonacci.cr#L5","def":{"name":"fibonacci","args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"((PHI ** n) / ROOT5).round"}},{"id":"is_palindrome?(num)-class-method","html_id":"is_palindrome?(num)-class-method","name":"is_palindrome?","doc":null,"summary":null,"abstract":false,"args":[{"name":"num","doc":null,"default_value":"","external_name":"num","restriction":""}],"args_string":"(num)","source_link":"https://github.com/xfbs/euler/blob/93b83f2d39f89b50f06e66e3121efc59bccd72b8/src/euler/palindrome.cr#L2","source_link":"https://github.com/xfbs/euler/blob/93b83f2d39f89b50f06e66e3121efc59bccd72b8/src/euler/palindrome.cr#L2","def":{"name":"is_palindrome?","args":[{"name":"num","doc":null,"default_value":"","external_name":"num","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"cur = num\nrev = 0\nwhile cur > 0\n  rev = rev * 10\n  rev = rev + (cur % 10)\n  cur = cur / 10\nend\nrev == num\n"}},{"id":"pandigital(len,nth)-class-method","html_id":"pandigital(len,nth)-class-method","name":"pandigital","doc":"generates the `nth` pandigital of length `len`, or in other words, the `nth`\npermutations of `1, 2, ..., len` as a number.","summary":"<p>generates the <code>nth</code> pandigital of length <code>len</code>, or in other words, the <code>nth</code> permutations of <code>1, 2, ..., len</code> as a number.</p>","abstract":false,"args":[{"name":"len","doc":null,"default_value":"","external_name":"len","restriction":""},{"name":"nth","doc":null,"default_value":"","external_name":"nth","restriction":""}],"args_string":"(len, nth)","source_link":"https://github.com/xfbs/euler/blob/93b83f2d39f89b50f06e66e3121efc59bccd72b8/src/euler/pandigital.cr#L6","source_link":"https://github.com/xfbs/euler/blob/93b83f2d39f89b50f06e66e3121efc59bccd72b8/src/euler/pandigital.cr#L6","def":{"name":"pandigital","args":[{"name":"len","doc":null,"default_value":"","external_name":"len","restriction":""},{"name":"nth","doc":null,"default_value":"","external_name":"nth","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"num = 0\ntaken = 0\nwhile len > 0\n  num = num * 10\n  choice = nth / (factorial64(len - 1))\n  nth = nth % (factorial64(len - 1))\n  digit = 0\n  while choice != 0\n    if (taken & (1 << digit)) > 0\n    else\n      choice = choice - 1\n    end\n    digit = digit + 1\n  end\n  while (taken & (1 << digit)) > 0\n    digit = digit + 1\n  end\n  taken = taken | (1 << digit)\n  num = num + (digit + 1)\n  len = len - 1\nend\nnum\n"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/xfbs/euler/Euler/Divisors","path":"Euler/Divisors.html","kind":"class","full_name":"Euler::Divisors(T)","name":"Divisors","abstract":false,"superclass":{"html_id":"github.com/xfbs/euler/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/xfbs/euler/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"},{"html_id":"github.com/xfbs/euler/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/xfbs/euler/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/xfbs/euler/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"euler/divisors.cr","line_number":3,"url":"https://github.com/xfbs/euler/blob/93b83f2d39f89b50f06e66e3121efc59bccd72b8/src/euler/divisors.cr"}],"repository_name":"github.com/xfbs/euler","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/xfbs/euler/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/xfbs/euler/Euler","kind":"module","full_name":"Euler","name":"Euler"},"doc":"an iterator over the divisors of a number (returns the divisors unsorted)","summary":"<p>an iterator over the divisors of a number (returns the divisors unsorted)</p>","class_methods":[],"constructors":[{"id":"new(num:T)-class-method","html_id":"new(num:T)-class-method","name":"new","doc":"creates a new iterator instance over the divisors of `num`.","summary":"<p>creates a new iterator instance over the divisors of <code>num</code>.</p>","abstract":false,"args":[{"name":"num","doc":null,"default_value":"","external_name":"num","restriction":"T"}],"args_string":"(num : T)","source_link":"https://github.com/xfbs/euler/blob/93b83f2d39f89b50f06e66e3121efc59bccd72b8/src/euler/divisors.cr#L7","source_link":"https://github.com/xfbs/euler/blob/93b83f2d39f89b50f06e66e3121efc59bccd72b8/src/euler/divisors.cr#L7","def":{"name":"new","args":[{"name":"num","doc":null,"default_value":"","external_name":"num","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Divisors(T).allocate\n_.initialize(num)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"next-instance-method","html_id":"next-instance-method","name":"next","doc":"returns the next divisors, the order in which the divisors are returned is\nundefined.","summary":"<p>returns the next divisors, the order in which the divisors are returned is undefined.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/xfbs/euler/blob/93b83f2d39f89b50f06e66e3121efc59bccd72b8/src/euler/divisors.cr#L16","source_link":"https://github.com/xfbs/euler/blob/93b83f2d39f89b50f06e66e3121efc59bccd72b8/src/euler/divisors.cr#L16","def":{"name":"next","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @cur > @sqrt\n  return self.stop\nend\nif !@check\n  if (@num % @cur) == 0\n    @check = true\n    return @cur\n  else\n    @cur = @cur + 1\n    return self.next\n  end\nelse\n  @check = false\n  recp = (  @num / @cur)\n  if (@cur != recp) && (@cur != 1)\n    @cur = @cur + 1\n    return recp\n  else\n    @cur = @cur + 1\n    return self.next\n  end\nend\n"}}],"macros":[],"types":[]},{"html_id":"github.com/xfbs/euler/Euler/Prime","path":"Euler/Prime.html","kind":"class","full_name":"Euler::Prime","name":"Prime","abstract":false,"superclass":{"html_id":"github.com/xfbs/euler/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/xfbs/euler/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"},{"html_id":"github.com/xfbs/euler/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/xfbs/euler/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/xfbs/euler/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"euler/prime.cr","line_number":2,"url":"https://github.com/xfbs/euler/blob/93b83f2d39f89b50f06e66e3121efc59bccd72b8/src/euler/prime.cr"}],"repository_name":"github.com/xfbs/euler","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/xfbs/euler/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/xfbs/euler/Euler","kind":"module","full_name":"Euler","name":"Euler"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":"initializes new prime empty prime generator, with 2 and 3 pre-generated.","summary":"<p>initializes new prime empty prime generator, with 2 and 3 pre-generated.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/xfbs/euler/blob/93b83f2d39f89b50f06e66e3121efc59bccd72b8/src/euler/prime.cr#L6","source_link":"https://github.com/xfbs/euler/blob/93b83f2d39f89b50f06e66e3121efc59bccd72b8/src/euler/prime.cr#L6","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"check?(n)-instance-method","html_id":"check?(n)-instance-method","name":"check?","doc":"checks if a number is prime by testing if any prime numbers up to\n`sqrt(n)` are proper divisors of it.","summary":"<p>checks if a number is prime by testing if any prime numbers up to <code>sqrt(n)</code> are proper divisors of it.</p>","abstract":false,"args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":""}],"args_string":"(n)","source_link":"https://github.com/xfbs/euler/blob/93b83f2d39f89b50f06e66e3121efc59bccd72b8/src/euler/prime.cr#L55","source_link":"https://github.com/xfbs/euler/blob/93b83f2d39f89b50f06e66e3121efc59bccd72b8/src/euler/prime.cr#L55","def":{"name":"check?","args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"max = (Math.sqrt(n)).to_i\nwhile @primes.last <= max\n  self.next\nend\ncheck_fast?(n)\n"}},{"id":"check_fast?(n)-instance-method","html_id":"check_fast?(n)-instance-method","name":"check_fast?","doc":"checks if a number is prime, assuming that we already generated primes up\nto `sqrt(n)`. use `#check?()` if you are not absolutely sure that is true.","summary":"<p>checks if a number is prime, assuming that we already generated primes up to <code>sqrt(n)</code>.</p>","abstract":false,"args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":""}],"args_string":"(n)","source_link":"https://github.com/xfbs/euler/blob/93b83f2d39f89b50f06e66e3121efc59bccd72b8/src/euler/prime.cr#L40","source_link":"https://github.com/xfbs/euler/blob/93b83f2d39f89b50f06e66e3121efc59bccd72b8/src/euler/prime.cr#L40","def":{"name":"check_fast?","args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"max = (Math.sqrt(n)).to_i\npos = 0\nprime = @primes.unsafe_at(pos)\nwhile prime <= max\n  if (n % prime) == 0\n    return false\n  end\n  pos = pos + 1\n  prime = @primes.unsafe_at(pos)\nend\ntrue\n"}},{"id":"index(n)-instance-method","html_id":"index(n)-instance-method","name":"index","doc":"returns `nil` if n is not prime, or a number `i` such that `#nth(i) == n`.","summary":"<p>returns <code>nil</code> if n is not prime, or a number <code>i</code> such that <code><a href=\"../Euler/Prime.html#nth%28p%29-instance-method\">#nth(i)</a> == n</code>.</p>","abstract":false,"args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":""}],"args_string":"(n)","source_link":"https://github.com/xfbs/euler/blob/93b83f2d39f89b50f06e66e3121efc59bccd72b8/src/euler/prime.cr#L66","source_link":"https://github.com/xfbs/euler/blob/93b83f2d39f89b50f06e66e3121efc59bccd72b8/src/euler/prime.cr#L66","def":{"name":"index","args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"while n > @primes.last\n  self.next\nend\ni = @primes.bsearch_index do |p, i|\n  p >= n\nend\nif (i.nil?) || (@primes[i.to_u] == n)\n  i\nelse\n  nil\nend\n"}},{"id":"iter-instance-method","html_id":"iter-instance-method","name":"iter","doc":"returns an iterator over the prime numbers. when `#nth()` is called while\niterating over the iterator, it might mess it up with the current\nimplementation.","summary":"<p>returns an iterator over the prime numbers.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/xfbs/euler/blob/93b83f2d39f89b50f06e66e3121efc59bccd72b8/src/euler/prime.cr#L34","source_link":"https://github.com/xfbs/euler/blob/93b83f2d39f89b50f06e66e3121efc59bccd72b8/src/euler/prime.cr#L34","def":{"name":"iter","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@primes.each.chain(self)"}},{"id":"next-instance-method","html_id":"next-instance-method","name":"next","doc":"generates the next prime that is larger than all cached primes.","summary":"<p>generates the next prime that is larger than all cached primes.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/xfbs/euler/blob/93b83f2d39f89b50f06e66e3121efc59bccd72b8/src/euler/prime.cr#L22","source_link":"https://github.com/xfbs/euler/blob/93b83f2d39f89b50f06e66e3121efc59bccd72b8/src/euler/prime.cr#L22","def":{"name":"next","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"cur = @primes.last + 2\nwhile !(check_fast?(cur))\n  cur = cur + 2\nend\n@primes.push(cur)\ncur\n"}},{"id":"nth(p)-instance-method","html_id":"nth(p)-instance-method","name":"nth","doc":"returns the nth prime, either by looking it up in it's cache or by\ngenerating all primes up to it. for large `p`, this is a very slow\noperation.","summary":"<p>returns the nth prime, either by looking it up in it's cache or by generating all primes up to it.</p>","abstract":false,"args":[{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":""}],"args_string":"(p)","source_link":"https://github.com/xfbs/euler/blob/93b83f2d39f89b50f06e66e3121efc59bccd72b8/src/euler/prime.cr#L13","source_link":"https://github.com/xfbs/euler/blob/93b83f2d39f89b50f06e66e3121efc59bccd72b8/src/euler/prime.cr#L13","def":{"name":"nth","args":[{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"while @primes.size <= p\n  self.next\nend\n@primes.unsafe_at(p)\n"}}],"macros":[],"types":[]},{"html_id":"github.com/xfbs/euler/Euler/Sieve","path":"Euler/Sieve.html","kind":"class","full_name":"Euler::Sieve","name":"Sieve","abstract":false,"superclass":{"html_id":"github.com/xfbs/euler/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/xfbs/euler/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/xfbs/euler/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/xfbs/euler/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"euler/sieve.cr","line_number":2,"url":"https://github.com/xfbs/euler/blob/93b83f2d39f89b50f06e66e3121efc59bccd72b8/src/euler/sieve.cr"}],"repository_name":"github.com/xfbs/euler","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/xfbs/euler/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/xfbs/euler/Euler","kind":"module","full_name":"Euler","name":"Euler"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(max)-class-method","html_id":"new(max)-class-method","name":"new","doc":"creates a new prime sieve capable of holding `max` primes.","summary":"<p>creates a new prime sieve capable of holding <code>max</code> primes.</p>","abstract":false,"args":[{"name":"max","doc":null,"default_value":"","external_name":"max","restriction":""}],"args_string":"(max)","source_link":"https://github.com/xfbs/euler/blob/93b83f2d39f89b50f06e66e3121efc59bccd72b8/src/euler/sieve.cr#L6","source_link":"https://github.com/xfbs/euler/blob/93b83f2d39f89b50f06e66e3121efc59bccd72b8/src/euler/sieve.cr#L6","def":{"name":"new","args":[{"name":"max","doc":null,"default_value":"","external_name":"max","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(max)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"each(&block)-instance-method","html_id":"each(&amp;block)-instance-method","name":"each","doc":"iterate over each prime number in the sieve","summary":"<p>iterate over each prime number in the sieve</p>","abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/xfbs/euler/blob/93b83f2d39f89b50f06e66e3121efc59bccd72b8/src/euler/sieve.cr#L21","source_link":"https://github.com/xfbs/euler/blob/93b83f2d39f89b50f06e66e3121efc59bccd72b8/src/euler/sieve.cr#L21","def":{"name":"each","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@sieve.each do |p|\n  if p > 0\n  else\n    next\n  end\n  yield p\nend"}}],"macros":[],"types":[]}]}]}}