{"repository_name":"github.com/xfbs/euler","body":"# Euler Library\n\nThe library is part of [xfbs/euler](https://xfbs.github.io/euler), which aims to\nsolve [Project Euler](https://projecteuler.net/) problems in a variety of\nlanguages.\n\nThe functions and classes of this library are to share code between different\nsolutions. There are also tests provided, if you clone the\n[repository](https://github.com/xfbs/euler), and navigate to this library (which\nis in `/lib/crystal/euler`), there is a `Makefile` that supports the following\ntargets:\n\n  - `make test`\n\n>   Builds and runs all the tests of this library.\n\n  - `make fmt`\n\n>   Runs the crystal code formatter over all of the code in this library.\n\n  - `make doc`\n\n>   Generates these docs, the output will be placed in `doc/lib/crystal` in the\n>   repository.\n\nAll code in this library has been developed and tested with Crystal `0.24.1`.\nSince crystal is still under development, things may break with future releases\nof Crystal.\n","program":{"html_id":"github.com/xfbs/euler/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/xfbs/euler","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/xfbs/euler/Euler","path":"Euler.html","kind":"module","full_name":"Euler","name":"Euler","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"euler/divisors.cr","line_number":1,"url":"https://github.com/xfbs/euler/blob/1239cc58ea00b531064a878703083aa072f34495/src/euler/divisors.cr"},{"filename":"euler/math.cr","line_number":1,"url":"https://github.com/xfbs/euler/blob/1239cc58ea00b531064a878703083aa072f34495/src/euler/math.cr"},{"filename":"euler/prime.cr","line_number":1,"url":"https://github.com/xfbs/euler/blob/1239cc58ea00b531064a878703083aa072f34495/src/euler/prime.cr"},{"filename":"euler/sieve.cr","line_number":1,"url":"https://github.com/xfbs/euler/blob/1239cc58ea00b531064a878703083aa072f34495/src/euler/sieve.cr"},{"filename":"euler.cr","line_number":5,"url":"https://github.com/xfbs/euler/blob/1239cc58ea00b531064a878703083aa072f34495/src/euler.cr"}],"repository_name":"github.com/xfbs/euler","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"name":"PHI","value":"((Math.sqrt(5)) + 1) / 2","doc":"The value of phi, the golden ratio.\n\nThis is precomputed and stored to efficiently generate fibonacci numbers\nwith `Euler.fibonacci(n)`.","summary":"<p>The value of phi, the golden ratio.</p>"},{"name":"ROOT5","value":"Math.sqrt(5)","doc":"The value of the square root of 5.\n\nThis is precomputed and stored to efficiently generate fibonacci numbers\nwith `Euler.fibonacci(n)`.","summary":"<p>The value of the square root of 5.</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"A collection of numerical functions and classes for use with Project Euler\nproblems.","summary":"<p>A collection of numerical functions and classes for use with Project Euler problems.</p>","class_methods":[{"id":"divisors(num)-class-method","html_id":"divisors(num)-class-method","name":"divisors","doc":"Returns an iterator over the divisors of `num`.\n\nConstructs and returns a new instance of `Euler::Divisors(T)`, where `T` is\nthe type of `num`.\n\n## Examples\n\n```\ndivisors(10).sum == 8   # ==> true\ndivisors(11).count == 1 # ==> true\n```","summary":"<p>Returns an iterator over the divisors of <code>num</code>.</p>","abstract":false,"args":[{"name":"num","doc":null,"default_value":"","external_name":"num","restriction":""}],"args_string":"(num)","source_link":"https://github.com/xfbs/euler/blob/1239cc58ea00b531064a878703083aa072f34495/src/euler/divisors.cr#L91","source_link":"https://github.com/xfbs/euler/blob/1239cc58ea00b531064a878703083aa072f34495/src/euler/divisors.cr#L91","def":{"name":"divisors","args":[{"name":"num","doc":null,"default_value":"","external_name":"num","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Divisors.new(num)"}},{"id":"factorial(n)-class-method","html_id":"factorial(n)-class-method","name":"factorial","doc":"Returns the `n`th factorial as a `UInt64`.\n\nUsing the cache `@@factorials`, we look up the `n`th factorial and return it\nas a `UInt64`. The caller must promise to not call this function with `n >\n20`. `UInt64` would overflow with 21!, so we don't store those factorials,\nmeaning that calling it would result in a crash.\n\n## Examples\n\n```\nEuler.factorial(0).should eq 1\nEuler.factorial(1).should eq 1\nEuler.factorial(2).should eq 2\nEuler.factorial(3).should eq 6\nEuler.factorial(6).should eq 720\n```","summary":"<p>Returns the <code>n</code>th factorial as a <code>UInt64</code>.</p>","abstract":false,"args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":""}],"args_string":"(n)","source_link":"https://github.com/xfbs/euler/blob/1239cc58ea00b531064a878703083aa072f34495/src/euler/math.cr#L38","source_link":"https://github.com/xfbs/euler/blob/1239cc58ea00b531064a878703083aa072f34495/src/euler/math.cr#L38","def":{"name":"factorial","args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@factorials[n]"}},{"id":"fibonacci(n)-class-method","html_id":"fibonacci(n)-class-method","name":"fibonacci","doc":"Generates the `n`th fibonacci number.\n\nThis uses a fast algorithm based on exponentiation of `Euler::PHI` to\ngenerate the `n`th fibonacci number.\n\n## Examples\n\n```\nEuler.fibonacci(1).should eq 1\nEuler.fibonacci(2).should eq 1\nEuler.fibonacci(3).should eq 2\nEuler.fibonacci(4).should eq 3\nEuler.fibonacci(5).should eq 5\nEuler.fibonacci(6).should eq 8\n```","summary":"<p>Generates the <code>n</code>th fibonacci number.</p>","abstract":false,"args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":""}],"args_string":"(n)","source_link":"https://github.com/xfbs/euler/blob/1239cc58ea00b531064a878703083aa072f34495/src/euler/math.cr#L57","source_link":"https://github.com/xfbs/euler/blob/1239cc58ea00b531064a878703083aa072f34495/src/euler/math.cr#L57","def":{"name":"fibonacci","args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"((PHI ** n) / ROOT5).round"}},{"id":"is_palindrome?(num,base=10)-class-method","html_id":"is_palindrome?(num,base=10)-class-method","name":"is_palindrome?","doc":"Checks if a number is a palindrome.\n\nQuickly checks if a number is a palindrome, meaning that it's digits are the\nsame read backwards as they are read forwards. For example, 1023201 is a\npalindrome (in base 10).\nNumbers can be checked for being palindromes in other bases, too.\n\n## Examples\n\n```\nEuler.is_palindrome(12321).should be_true\nEuler.is_palindrome(1002101).should be_false\nEuler.is_palindrome(5, 2).should be_true\n```","summary":"<p>Checks if a number is a palindrome.</p>","abstract":false,"args":[{"name":"num","doc":null,"default_value":"","external_name":"num","restriction":""},{"name":"base","doc":null,"default_value":"10","external_name":"base","restriction":""}],"args_string":"(num, base = <span class=\"n\">10</span>)","source_link":"https://github.com/xfbs/euler/blob/1239cc58ea00b531064a878703083aa072f34495/src/euler/math.cr#L75","source_link":"https://github.com/xfbs/euler/blob/1239cc58ea00b531064a878703083aa072f34495/src/euler/math.cr#L75","def":{"name":"is_palindrome?","args":[{"name":"num","doc":null,"default_value":"","external_name":"num","restriction":""},{"name":"base","doc":null,"default_value":"10","external_name":"base","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"cur = num\nrev = 0\nwhile cur > 0\n  rev = rev * base\n  rev = rev + (cur % base)\n  cur = cur / base\nend\nrev == num\n"}},{"id":"pandigital(len,nth)-class-method","html_id":"pandigital(len,nth)-class-method","name":"pandigital","doc":"Generates the `nth` pandigital of length `len`.\n\nWorks by generating the `nth` permutation of 1..`len`, and returning that as\na number.\n\n## Examples\n\n```\nEuler.pandigital(len: 5, nth: 3).should eq 12453\nEuler.pandigital(len: 9, nth: 0).should eq 123456789\n```","summary":"<p>Generates the <code>nth</code> pandigital of length <code>len</code>.</p>","abstract":false,"args":[{"name":"len","doc":null,"default_value":"","external_name":"len","restriction":""},{"name":"nth","doc":null,"default_value":"","external_name":"nth","restriction":""}],"args_string":"(len, nth)","source_link":"https://github.com/xfbs/euler/blob/1239cc58ea00b531064a878703083aa072f34495/src/euler/math.cr#L98","source_link":"https://github.com/xfbs/euler/blob/1239cc58ea00b531064a878703083aa072f34495/src/euler/math.cr#L98","def":{"name":"pandigital","args":[{"name":"len","doc":null,"default_value":"","external_name":"len","restriction":""},{"name":"nth","doc":null,"default_value":"","external_name":"nth","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"num = 0\ntaken = 0\nwhile len > 0\n  num = num * 10\n  choice = nth / (factorial(len - 1))\n  nth = nth % (factorial(len - 1))\n  digit = 0\n  while choice != 0\n    if (taken & (1 << digit)) > 0\n    else\n      choice = choice - 1\n    end\n    digit = digit + 1\n  end\n  while (taken & (1 << digit)) > 0\n    digit = digit + 1\n  end\n  taken = taken | (1 << digit)\n  num = num + (digit + 1)\n  len = len - 1\nend\nnum\n"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/xfbs/euler/Euler/Divisors","path":"Euler/Divisors.html","kind":"class","full_name":"Euler::Divisors(T)","name":"Divisors","abstract":false,"superclass":{"html_id":"github.com/xfbs/euler/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/xfbs/euler/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"},{"html_id":"github.com/xfbs/euler/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/xfbs/euler/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/xfbs/euler/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"euler/divisors.cr","line_number":14,"url":"https://github.com/xfbs/euler/blob/1239cc58ea00b531064a878703083aa072f34495/src/euler/divisors.cr"}],"repository_name":"github.com/xfbs/euler","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/xfbs/euler/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/xfbs/euler/Euler","kind":"module","full_name":"Euler","name":"Euler"},"doc":"An iterator over the divisors of a number.\n\nThis is not the most efficient code as it just brute forces divisors from\none until the square root of the number. It returns all proper divisors —\nmeaning divisors that are smaller than the number itself.\n\nThe order in which this iterator returns the divisors in unspecified — if\nyou need them to be sorted, you have to do that manually.\n\nYou can use this class directly, or you can use the `Euler.divisors()`\nfunction which just wraps it and saves you from having to type\n`Euler::Divisors.new(num)`.","summary":"<p>An iterator over the divisors of a number.</p>","class_methods":[],"constructors":[{"id":"new(num:T)-class-method","html_id":"new(num:T)-class-method","name":"new","doc":"Creates a new iterator instance over the divisors of `num`.\n\nSince this class is generic, whatever type `num` has is also the type of\nthe divisors that will be returned. Note that this class probably won't\nwork with floating-point variables, so make sure `num` is an integral\ntype.\n\n## Examples\n\n```\ndivisors = Euler::Divisors.new(55)\ndivisors[0] == 1 # ==> true\ndivisors[1] == 5 # ==> true\n```","summary":"<p>Creates a new iterator instance over the divisors of <code>num</code>.</p>","abstract":false,"args":[{"name":"num","doc":null,"default_value":"","external_name":"num","restriction":"T"}],"args_string":"(num : T)","source_link":"https://github.com/xfbs/euler/blob/1239cc58ea00b531064a878703083aa072f34495/src/euler/divisors.cr#L31","source_link":"https://github.com/xfbs/euler/blob/1239cc58ea00b531064a878703083aa072f34495/src/euler/divisors.cr#L31","def":{"name":"new","args":[{"name":"num","doc":null,"default_value":"","external_name":"num","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Divisors(T).allocate\n_.initialize(num)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"next-instance-method","html_id":"next-instance-method","name":"next","doc":"Returns the next divisor, or Iterator::Stop to signal that there aren't\nany left.\n\n## Examples\n\n```\ndiv = Euler::Divisors.new(12)\ndiv.next == 1 # ==> true\ndiv.next == 2 # ==> true\ndiv.next == 3 # ==> true\ndiv.next == 4 # ==> true\ndiv.next == 6 # ==> true\ndiv.next == Iterator::Stop # ==> true\n```","summary":"<p>Returns the next divisor, or Iterator::Stop to signal that there aren't any left.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/xfbs/euler/blob/1239cc58ea00b531064a878703083aa072f34495/src/euler/divisors.cr#L52","source_link":"https://github.com/xfbs/euler/blob/1239cc58ea00b531064a878703083aa072f34495/src/euler/divisors.cr#L52","def":{"name":"next","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @cur > @sqrt\n  return self.stop\nend\nif !@check\n  if (@num % @cur) == 0\n    @check = true\n    return @cur\n  else\n    @cur = @cur + 1\n    return self.next\n  end\nelse\n  @check = false\n  recp = (  @num / @cur)\n  if (@cur != recp) && (@cur != 1)\n    @cur = @cur + 1\n    return recp\n  else\n    @cur = @cur + 1\n    return self.next\n  end\nend\n"}}],"macros":[],"types":[]},{"html_id":"github.com/xfbs/euler/Euler/Prime","path":"Euler/Prime.html","kind":"class","full_name":"Euler::Prime","name":"Prime","abstract":false,"superclass":{"html_id":"github.com/xfbs/euler/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/xfbs/euler/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"},{"html_id":"github.com/xfbs/euler/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/xfbs/euler/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/xfbs/euler/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"euler/prime.cr","line_number":2,"url":"https://github.com/xfbs/euler/blob/1239cc58ea00b531064a878703083aa072f34495/src/euler/prime.cr"}],"repository_name":"github.com/xfbs/euler","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/xfbs/euler/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/xfbs/euler/Euler","kind":"module","full_name":"Euler","name":"Euler"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":"initializes new prime empty prime generator, with 2 and 3 pre-generated.","summary":"<p>initializes new prime empty prime generator, with 2 and 3 pre-generated.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/xfbs/euler/blob/1239cc58ea00b531064a878703083aa072f34495/src/euler/prime.cr#L6","source_link":"https://github.com/xfbs/euler/blob/1239cc58ea00b531064a878703083aa072f34495/src/euler/prime.cr#L6","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"check?(n)-instance-method","html_id":"check?(n)-instance-method","name":"check?","doc":"checks if a number is prime by testing if any prime numbers up to\n`sqrt(n)` are proper divisors of it.","summary":"<p>checks if a number is prime by testing if any prime numbers up to <code>sqrt(n)</code> are proper divisors of it.</p>","abstract":false,"args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":""}],"args_string":"(n)","source_link":"https://github.com/xfbs/euler/blob/1239cc58ea00b531064a878703083aa072f34495/src/euler/prime.cr#L55","source_link":"https://github.com/xfbs/euler/blob/1239cc58ea00b531064a878703083aa072f34495/src/euler/prime.cr#L55","def":{"name":"check?","args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"max = (Math.sqrt(n)).to_i\nwhile @primes.last <= max\n  self.next\nend\ncheck_fast?(n)\n"}},{"id":"check_fast?(n)-instance-method","html_id":"check_fast?(n)-instance-method","name":"check_fast?","doc":"checks if a number is prime, assuming that we already generated primes up\nto `sqrt(n)`. use `#check?()` if you are not absolutely sure that is true.","summary":"<p>checks if a number is prime, assuming that we already generated primes up to <code>sqrt(n)</code>.</p>","abstract":false,"args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":""}],"args_string":"(n)","source_link":"https://github.com/xfbs/euler/blob/1239cc58ea00b531064a878703083aa072f34495/src/euler/prime.cr#L40","source_link":"https://github.com/xfbs/euler/blob/1239cc58ea00b531064a878703083aa072f34495/src/euler/prime.cr#L40","def":{"name":"check_fast?","args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"max = (Math.sqrt(n)).to_i\npos = 0\nprime = @primes.unsafe_at(pos)\nwhile prime <= max\n  if (n % prime) == 0\n    return false\n  end\n  pos = pos + 1\n  prime = @primes.unsafe_at(pos)\nend\ntrue\n"}},{"id":"index(n)-instance-method","html_id":"index(n)-instance-method","name":"index","doc":"returns `nil` if n is not prime, or a number `i` such that `#nth(i) == n`.","summary":"<p>returns <code>nil</code> if n is not prime, or a number <code>i</code> such that <code><a href=\"../Euler/Prime.html#nth%28p%29-instance-method\">#nth(i)</a> == n</code>.</p>","abstract":false,"args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":""}],"args_string":"(n)","source_link":"https://github.com/xfbs/euler/blob/1239cc58ea00b531064a878703083aa072f34495/src/euler/prime.cr#L66","source_link":"https://github.com/xfbs/euler/blob/1239cc58ea00b531064a878703083aa072f34495/src/euler/prime.cr#L66","def":{"name":"index","args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"while n > @primes.last\n  self.next\nend\ni = @primes.bsearch_index do |p, i|\n  p >= n\nend\nif (i.nil?) || (@primes[i.to_u] == n)\n  i\nelse\n  nil\nend\n"}},{"id":"iter-instance-method","html_id":"iter-instance-method","name":"iter","doc":"returns an iterator over the prime numbers. when `#nth()` is called while\niterating over the iterator, it might mess it up with the current\nimplementation.","summary":"<p>returns an iterator over the prime numbers.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/xfbs/euler/blob/1239cc58ea00b531064a878703083aa072f34495/src/euler/prime.cr#L34","source_link":"https://github.com/xfbs/euler/blob/1239cc58ea00b531064a878703083aa072f34495/src/euler/prime.cr#L34","def":{"name":"iter","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@primes.each.chain(self)"}},{"id":"next-instance-method","html_id":"next-instance-method","name":"next","doc":"generates the next prime that is larger than all cached primes.","summary":"<p>generates the next prime that is larger than all cached primes.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/xfbs/euler/blob/1239cc58ea00b531064a878703083aa072f34495/src/euler/prime.cr#L22","source_link":"https://github.com/xfbs/euler/blob/1239cc58ea00b531064a878703083aa072f34495/src/euler/prime.cr#L22","def":{"name":"next","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"cur = @primes.last + 2\nwhile !(check_fast?(cur))\n  cur = cur + 2\nend\n@primes.push(cur)\ncur\n"}},{"id":"nth(p)-instance-method","html_id":"nth(p)-instance-method","name":"nth","doc":"returns the nth prime, either by looking it up in it's cache or by\ngenerating all primes up to it. for large `p`, this is a very slow\noperation.","summary":"<p>returns the nth prime, either by looking it up in it's cache or by generating all primes up to it.</p>","abstract":false,"args":[{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":""}],"args_string":"(p)","source_link":"https://github.com/xfbs/euler/blob/1239cc58ea00b531064a878703083aa072f34495/src/euler/prime.cr#L13","source_link":"https://github.com/xfbs/euler/blob/1239cc58ea00b531064a878703083aa072f34495/src/euler/prime.cr#L13","def":{"name":"nth","args":[{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"while @primes.size <= p\n  self.next\nend\n@primes.unsafe_at(p)\n"}}],"macros":[],"types":[]},{"html_id":"github.com/xfbs/euler/Euler/Sieve","path":"Euler/Sieve.html","kind":"class","full_name":"Euler::Sieve","name":"Sieve","abstract":false,"superclass":{"html_id":"github.com/xfbs/euler/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/xfbs/euler/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/xfbs/euler/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/xfbs/euler/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"euler/sieve.cr","line_number":2,"url":"https://github.com/xfbs/euler/blob/1239cc58ea00b531064a878703083aa072f34495/src/euler/sieve.cr"}],"repository_name":"github.com/xfbs/euler","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/xfbs/euler/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/xfbs/euler/Euler","kind":"module","full_name":"Euler","name":"Euler"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(max)-class-method","html_id":"new(max)-class-method","name":"new","doc":"creates a new prime sieve capable of holding `max` primes.","summary":"<p>creates a new prime sieve capable of holding <code>max</code> primes.</p>","abstract":false,"args":[{"name":"max","doc":null,"default_value":"","external_name":"max","restriction":""}],"args_string":"(max)","source_link":"https://github.com/xfbs/euler/blob/1239cc58ea00b531064a878703083aa072f34495/src/euler/sieve.cr#L6","source_link":"https://github.com/xfbs/euler/blob/1239cc58ea00b531064a878703083aa072f34495/src/euler/sieve.cr#L6","def":{"name":"new","args":[{"name":"max","doc":null,"default_value":"","external_name":"max","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(max)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"each(&block)-instance-method","html_id":"each(&amp;block)-instance-method","name":"each","doc":"iterate over each prime number in the sieve","summary":"<p>iterate over each prime number in the sieve</p>","abstract":false,"args":[],"args_string":"(&block)","source_link":"https://github.com/xfbs/euler/blob/1239cc58ea00b531064a878703083aa072f34495/src/euler/sieve.cr#L21","source_link":"https://github.com/xfbs/euler/blob/1239cc58ea00b531064a878703083aa072f34495/src/euler/sieve.cr#L21","def":{"name":"each","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@sieve.each do |p|\n  if p > 0\n  else\n    next\n  end\n  yield p\nend"}}],"macros":[],"types":[]}]}]}}